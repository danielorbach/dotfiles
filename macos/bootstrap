#!/bin/zsh

# Enable strict mode for better error handling
setopt errexit nounset pipefail


# === HELPERS ===

error() {
  # Print message in red.
  echo -e "\\033[1;31m[ERROR]\\033[0m $*" >&2
  exit 1
}

info() {
  # Print message in green.
  echo -e "\\033[1;32m[INFO]\\033[0m  $*"
}

warn() {
  # Print message in green.
  echo -e "\\033[1;33m[WARN]\\033[0m  $*"
}



# === INTRO ===

echo " +-------------------------------------------------------+ "
echo " |        Dotfiles Bootstrap Script (MacBook)            | "
echo " +-------------------------------------------------------+ "



# === CHECKS ===

# Ensure we are running in Zsh.
if [[ -z "${ZSH_VERSION:-}" ]]; then
  error "This script must be run using zsh."
fi

# Ensure we are on macOS (Darwin).
if [[ "$(uname -s)" != "Darwin" ]]; then
  error "This script only supports macOS (Darwin)."
fi

# Ensure the architecture is Apple Silicon (arm64).
if [[ "$(uname -m)" != "arm64" ]]; then
  error "This script must be run on Apple Silicon (arm64)."
fi

info "üëç All checks passed. Proceeding with bootstrap..."



# === BOOTSTRAP ===

# Get the absolute path (resolving symlinks) of the script.
# Then strip the filename, leaving just the directory.
SCRIPT_DIR="${0:A:h}"

for script in "$SCRIPT_DIR"/bootstrap.d/*; do
  if [[ -f "$script" && -x "$script" ]]; then
    info "‚åõÔ∏è Running $script..."
    # Run the script. Running the program should open a new shell, so changes
    # made to the shell environment by previous scripts should take affect
    # immediately.
    if ! "$script"; then
      error "üí• Failed to run $script"
    else
      info "üëç Boostrap script completed successfully: $script"
    fi
  else
    warn "üôã‚Äç‚ôÄÔ∏è Found non-executable bootstrap script: $script"
  fi
done

info "üéâ Bootstrap completed successfully!"
